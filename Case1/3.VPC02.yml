AWSTemplateFormatVersion: "2010-09-09"

Metadata:
  "AWS::CloudFormation::Interface":
    ParameterGroups:
      - Label:
          default: "VPC Parameters"
        Parameters:
         - AvailabilityZoneA
         - AvailabilityZoneB
         - VPCCIDRBlock
         - PrivateSubnetABlock
         - PrivateSubnetBBlock
         - FWABlock
         - FWBBlock
         - TGWSubnetABlock
         - TGWSubnetBBlock
         - InstanceType

Parameters:
  AvailabilityZoneA:
    Description: "Choose AZ1 for your VPC."
    Type: AWS::EC2::AvailabilityZone::Name
    Default: "ap-northeast-2a"

  AvailabilityZoneB:
    Description: "Choose AZ2 for your VPC."
    Type: AWS::EC2::AvailabilityZone::Name
    Default: "ap-northeast-2b"

  VPCCIDRBlock:
    Type: String
    Default: 10.2.0.0/16
    Description: "The CIDR range for the VPC. This should be a valid private (RFC 1918) CIDR range."

  FWABlock:
    Type: String
    Default: 10.2.1.0/24
    Description: "CidrBlock for AZ A FW subnet A within the VPC"   

  FWBBlock:
    Type: String
    Default: 10.2.2.0/24
    Description: "CidrBlock for AZ B FW subnet B within the VPC"

  PrivateSubnetABlock:
    Type: String
    Default: 10.2.21.0/24
    Description: "CidrBlock for AZ A private subnet A within the VPC"

  PrivateSubnetBBlock:
    Type: String
    Default: 10.2.22.0/24
    Description: "CidrBlock for AZ B private subnet B within the VPC"
  
  TGWSubnetABlock:
    Type: String
    Default: 10.2.251.0/24
    Description: "CidrBlock for AZ A TGW subnet A within the VPC"

  TGWSubnetBBlock:
    Type: String
    Default: 10.2.252.0/24
    Description: "CidrBlock for AZ A TGW subnet A within the VPC"

  DefaultRouteBlock:
    Type: String
    Default: 0.0.0.0/0
    Description: "Enter desired CIDR to Default route"

  InstanceType:
    Type: String
    Default: t3.small
    Description: EC2 Instance Type for the VPC.

################################
# Create-Keypair : EC2 Keypair #
################################

#  KeyPair:
#    Description: "Keypair to access the EC2 Instance"
#    Type: "AWS::EC2::KeyPair::KeyName"
#    Default: "Your KeyPair"

##########################
# Create-AMI: EC2 AMI ID #
##########################

  LatestAmiId:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"

###############################
# Create-Resource: Resource   #
###############################

Resources:

#####################
# Create-VPC : VPC #
#####################

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDRBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}'
        - Key: project
          Value: !Sub '${AWS::StackName}'
###############################################
# Create-FW-Subnet: VPC FW_Subnet_a,b #
###############################################

  FWSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref FWABlock
      AvailabilityZone: !Ref AvailabilityZoneA
      MapPublicIpOnLaunch: "true"
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-FW-Subnet-A'

  FWSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref FWBBlock
      AvailabilityZone: !Ref AvailabilityZoneB
      MapPublicIpOnLaunch: "true"
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-FW-Subnet-B'

  FWSubnetARouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-FW-RT'

  FWSubnetRouteTableAAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref FWSubnetA
      RouteTableId: !Ref FWSubnetARouteTable

  FWSubnetBRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-FW-B-RT'  

  FWSubnetRouteTableBAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref FWSubnetB
      RouteTableId: !Ref FWSubnetBRouteTable

########################################################
# Create-Private-Subnet: Create VPC Private_Subnet_a,b #
########################################################

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetABlock
      AvailabilityZone: !Ref AvailabilityZoneA
      MapPublicIpOnLaunch: "true"
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrivateSubnetA'

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetBBlock
      AvailabilityZone: !Ref AvailabilityZoneB
      MapPublicIpOnLaunch: "true"
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrivateSubnetB'

#####################################################################
# Create-Private-RouteTable: Create VPC_Private_RouteTable_a,b #
#####################################################################
  PrivateSubnetARouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Private-Subnet-A-RT'

  PrivateSubnetBRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Private-Subnet-B-RT'

################################################################################################
# Associate-Private-RouteTable: VPC_Private_Subnet_a,b Accsociate VPC_Private_RouteTable #
################################################################################################
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA   
      RouteTableId: !Ref PrivateSubnetARouteTable

  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateSubnetBRouteTable

  PrivateRouteTableA1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnetARouteTable
      DestinationCidrBlock: !Ref DefaultRouteBlock
      VpcEndpointId: !GetAtt VPC02FWVpceIds.FwVpceId1

  PrivateRouteTableB1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnetBRouteTable
      DestinationCidrBlock: !Ref DefaultRouteBlock
      VpcEndpointId: !GetAtt VPC02FWVpceIds.FwVpceId2
#############################################################
# Create-TGW-Subnet: Create VPC TGW_Subnet_a,b,c,d #
#############################################################

  TGWSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref TGWSubnetABlock
      AvailabilityZone: !Ref AvailabilityZoneA
      MapPublicIpOnLaunch: "true"
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-TGWSubnetA'

  TGWSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref TGWSubnetBBlock
      AvailabilityZone: !Ref AvailabilityZoneB
      MapPublicIpOnLaunch: "true"
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-TGWSubnetB'

################################################################################################
# Associate-TGW-RouteTable: VPC_TGW_Subnet_a,b Accsociate VPC_TGW_RouteTable #
################################################################################################
  TGWSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref TGWSubnetA   
      RouteTableId: !Ref TGWSubnetARouteTable

  TGWSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref TGWSubnetB
      RouteTableId: !Ref TGWSubnetBRouteTable

  TGWRouteTableA1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref TGWSubnetARouteTable
      DestinationCidrBlock: !Ref PrivateSubnetABlock
      VpcEndpointId: !GetAtt VPC02FWVpceIds.FwVpceId1

  TGWRouteTableB1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref TGWSubnetBRouteTable
      DestinationCidrBlock: !Ref PrivateSubnetABlock
      VpcEndpointId: !GetAtt VPC02FWVpceIds.FwVpceId2

#####################################################################
# Create-TGW-RouteTable: Create VPC_TGW_RouteTable_a,b,c,d #
#####################################################################
  TGWSubnetARouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-TGW-Subnet-A-RT'

  TGWSubnetBRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-TGW-Subnet-B-RT'

###############################################
# Create-SSM: Create PrivateServer ServerRole #
###############################################

  ServerRoleSSM:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-Case1VPC02-SSMRole'
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole

  InstanceProfileSSM:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles: 
        - Ref: ServerRoleSSM
        
###############################################################################
# Create-Security-Group: VPC Security Group - HTTP, HTTPS, ICMP , SSH Permit #
###############################################################################

  PrivateEC2SG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open-up ports for ICMP and SSH,HTTP/S from All network
      GroupName: PrivateEC2SG
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: icmp
          CidrIp: 0.0.0.0/0
          FromPort: "-1"
          ToPort: "-1"
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: "22"
          ToPort: "22"
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: "80"
          ToPort: "80"
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: "443"
          ToPort: "443"
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrivateSG'

  SSMSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open-up ports for HTTP/S from All network
      GroupName: SSMSG
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: "80"
          ToPort: "80"
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: "443"
          ToPort: "443"
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-SSMSG'

##############################################
# Create-Private-EC2: VPC Private EC2 Create #
##############################################

  PrivateAInstanace1:
    Type: AWS::EC2::Instance
    DependsOn: PrivateSubnetA
    Properties:
      SubnetId: !Ref PrivateSubnetA
      ImageId: !Ref LatestAmiId
      PrivateIpAddress: 10.2.21.101
      InstanceType: !Ref InstanceType
      SecurityGroupIds: 
        - Ref: PrivateEC2SG
#      KeyName: !Ref KeyPair
      IamInstanceProfile: !Ref InstanceProfileSSM
      BlockDeviceMappings: 
        - DeviceName: /dev/xvda
          Ebs: 
            VolumeSize: 20
            VolumeType: gp3
            Iops: 3000
            DeleteOnTermination: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Private-A-10.2.21.101'
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash
            sudo yum -y update;
            sudo yum -y install yum-utils; 
            sudo yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm;
            sudo yum -y install iotop iperf3 iptraf tcpdump git bash-completion; 
            sudo yum -y install httpd php mysql php-mysql;
            sudo yum -y install python-pip;
            sudo yum -y install nethogs iftop lnav nmon tmux wireshark vsftpd ftp golang;
            sudo systemctl start httpd;
            sudo systemctl enable httpd;
            cd /var/www/html/;
            sudo git clone https://github.com/whchoi98/ec2meta-webpage.git;
            sudo systemctl restart httpd;
            git clone https://github.com/gcla/termshark.git;
            cd ~/termshark/;
            go get github.com/gcla/termshark/v2/cmd/termshark;
            cd ~;
            exit       

  PrivateAInstanace2:
    Type: AWS::EC2::Instance
    DependsOn: PrivateSubnetA
    Properties:
      SubnetId: !Ref PrivateSubnetA
      ImageId: !Ref LatestAmiId
      PrivateIpAddress: 10.2.21.102
      InstanceType: !Ref InstanceType
      SecurityGroupIds: 
        - Ref: PrivateEC2SG
#      KeyName: !Ref KeyPair
      IamInstanceProfile: !Ref InstanceProfileSSM
      BlockDeviceMappings: 
        - DeviceName: /dev/xvda
          Ebs: 
            VolumeSize: 20
            VolumeType: gp3
            Iops: 3000
            DeleteOnTermination: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Private-A-10.2.21.102'
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash
            sudo yum -y update;
            sudo yum -y install yum-utils; 
            sudo yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm;
            sudo yum -y install iotop iperf3 iptraf tcpdump git bash-completion; 
            sudo yum -y install httpd php mysql php-mysql; 
            sudo yum -y install python-pip;
            sudo yum -y install nethogs iftop lnav nmon tmux wireshark vsftpd ftp golang;
            sudo systemctl start httpd;
            sudo systemctl enable httpd;
            cd /var/www/html/;
            sudo git clone https://github.com/whchoi98/ec2meta-webpage.git;
            sudo systemctl restart httpd;
            git clone https://github.com/gcla/termshark.git;
            cd ~/termshark/;
            go get github.com/gcla/termshark/v2/cmd/termshark;
            cd ~;
            exit       

  PrivateBInstanace1:
    Type: AWS::EC2::Instance
    DependsOn: PrivateSubnetB
    Properties:
      SubnetId: !Ref PrivateSubnetB
      ImageId: !Ref LatestAmiId
      PrivateIpAddress: 10.2.22.101
      InstanceType: !Ref InstanceType
      SecurityGroupIds: 
        - Ref: PrivateEC2SG
#      KeyName: !Ref KeyPair
      IamInstanceProfile: !Ref InstanceProfileSSM
      BlockDeviceMappings: 
        - DeviceName: /dev/xvda
          Ebs: 
            VolumeSize: 20
            VolumeType: gp3
            Iops: 3000
            DeleteOnTermination: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Private-B-10.2.22.101'
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash
            sudo yum -y update;
            sudo yum -y install yum-utils; 
            sudo yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm;
            sudo yum -y install iotop iperf3 iptraf tcpdump git bash-completion; 
            sudo yum -y install httpd php mysql php-mysql; 
            sudo yum -y install python-pip;
            sudo yum -y install nethogs iftop lnav nmon tmux wireshark vsftpd ftp golang;
            sudo systemctl start httpd;
            sudo systemctl enable httpd;
            cd /var/www/html/;
            sudo git clone https://github.com/whchoi98/ec2meta-webpage.git;
            sudo systemctl restart httpd;
            exit

  PrivateBInstanace2:
    Type: AWS::EC2::Instance
    DependsOn: PrivateSubnetB
    Properties:
      SubnetId: !Ref PrivateSubnetB
      ImageId: !Ref LatestAmiId
      PrivateIpAddress: 10.2.22.102
      InstanceType: !Ref InstanceType
      SecurityGroupIds: 
        - Ref: PrivateEC2SG
#      KeyName: !Ref KeyPair
      IamInstanceProfile: !Ref InstanceProfileSSM
      BlockDeviceMappings: 
        - DeviceName: /dev/xvda
          Ebs: 
            VolumeSize: 20
            VolumeType: gp3
            Iops: 3000
            DeleteOnTermination: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Private-B-10.2.22.102'
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash
            sudo yum -y update;
            sudo yum -y install yum-utils; 
            sudo yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm;
            sudo yum -y install iotop iperf3 iptraf tcpdump git bash-completion; 
            sudo yum -y install httpd php mysql php-mysql; 
            sudo yum -y install python-pip;
            sudo yum -y install nethogs iftop lnav nmon tmux wireshark vsftpd ftp golang;
            sudo systemctl start httpd;
            sudo systemctl enable httpd;
            cd /var/www/html/;
            sudo git clone https://github.com/whchoi98/ec2meta-webpage.git;
            sudo systemctl restart httpd;
            exit

######################################################################
# Create-System-Manager-Endpoint: Create VPC SystemManager Endpoint #
######################################################################

  SSMEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssm"
      VpcEndpointType: Interface
      PrivateDnsEnabled: True
      SubnetIds: 
        - Ref: PrivateSubnetA
        - Ref: PrivateSubnetB
      SecurityGroupIds:
        - Ref: SSMSG

  SSMMEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssmmessages"
      VpcEndpointType: Interface
      PrivateDnsEnabled: True
      SubnetIds: 
        - Ref: PrivateSubnetA
        - Ref: PrivateSubnetB
      SecurityGroupIds:
        - Ref: SSMSG

###############
#Firewall
###############

  VPC02FWStrictModeStatefulRuleGroup:
    Type: 'AWS::NetworkFirewall::RuleGroup'
    Properties:
      RuleGroupName: !Sub "VPC02FW-strictmode-${AWS::StackName}"
      Type: STATEFUL
      Capacity: 100
      RuleGroup:
        RulesSource:
          StatefulRules:
            - Action: ALERT
              Header:
                Protocol: TCP
                Source: ANY
                SourcePort: ANY
                Direction: ANY
                Destination: ANY
                DestinationPort: 80
              RuleOptions:
                - Keyword: "sid:1"
            - Action: ALERT
              Header:
                Protocol: TCP
                Source: ANY
                SourcePort: ANY
                Direction: ANY
                Destination: ANY
                DestinationPort: 443
              RuleOptions:
                - Keyword: "sid:2"
            - Action: ALERT
              Header:
                Protocol: ICMP
                Source: ANY
                SourcePort: ANY
                Direction: ANY
                Destination: ANY
                DestinationPort: ANY
              RuleOptions:
                - Keyword: "sid:3"
            - Action: PASS
              Header:
                Protocol: IP
                Source: ANY
                SourcePort: ANY
                Direction: ANY
                Destination: ANY
                DestinationPort: ANY
              RuleOptions:
                - Keyword: "sid:100"
        StatefulRuleOptions:
          RuleOrder: STRICT_ORDER
      Tags:
        - Key: Name
          Value: !Sub "VPC02FW-STRICTMODE-${AWS::StackName}"
          
  VPC02FWDomainAllowStatefulRuleGroup:
    Type: 'AWS::NetworkFirewall::RuleGroup'
    Properties:
      RuleGroupName: !Sub "VPC02FW-domain-allow-${AWS::StackName}"
      Type: STATEFUL
      Capacity: 100
      RuleGroup:
        RuleVariables:
          IPSets:
            HOME_NET:
              Definition:
                - "10.0.0.0/8"
        RulesSource:
          RulesSourceList:
            TargetTypes:
              - HTTP_HOST
              - TLS_SNI
            Targets: 
              - ".amazon.com"
            GeneratedRulesType: "ALLOWLIST"
        StatefulRuleOptions:
          RuleOrder: STRICT_ORDER
      Tags:
        - Key: Name
          Value: !Sub "VPC02FW-domain-allow-${AWS::StackName}"

  VPC02FWPolicy:
    Type: AWS::NetworkFirewall::FirewallPolicy
    Properties:
      FirewallPolicyName: !Sub "VPC02FW-firewall-policy-${AWS::StackName}"
      FirewallPolicy:
        StatelessDefaultActions:
          - 'aws:forward_to_sfe'
        StatelessFragmentDefaultActions:
          - 'aws:forward_to_sfe'
        StatefulRuleGroupReferences:
          - ResourceArn: !Ref VPC02FWDomainAllowStatefulRuleGroup
            Priority: 2
          - ResourceArn: !Ref VPC02FWStrictModeStatefulRuleGroup
            Priority: 1
        StatefulEngineOptions:
          RuleOrder: STRICT_ORDER
      Tags:
        - Key: Name
          Value: !Sub "VPC02FW-firewall-policy-${AWS::StackName}"

  VPC02FW:
    Type: AWS::NetworkFirewall::Firewall
    Properties:
      FirewallName: !Sub "VPC02FW-${AWS::StackName}"
      FirewallPolicyArn: !Ref VPC02FWPolicy
      VpcId: !Ref VPC
      SubnetMappings:
        - SubnetId: !Ref FWSubnetA
        - SubnetId: !Ref FWSubnetB
      Tags:
        - Key: Name
          Value: !Sub "VPC02FW-${AWS::StackName}"

  VPC02FWLogFlowGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/${AWS::StackName}/VPC02FW/flow"

  VPC02FWLogAlertGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/${AWS::StackName}/VPC02FW/alert"
      
  VPC02FWLog:
    Type: AWS::NetworkFirewall::LoggingConfiguration
    Properties:
      FirewallArn: !Ref VPC02FW
      LoggingConfiguration:
        LogDestinationConfigs:
          - LogType: FLOW
            LogDestinationType: CloudWatchLogs
            LogDestination:
              logGroup: !Sub "/${AWS::StackName}/VPC02FW/flow"
          - LogType: ALERT
            LogDestinationType: CloudWatchLogs
            LogDestination:
              logGroup: !Sub "/${AWS::StackName}/VPC02FW/alert"
###############################################
# Firewall Endpoint Id Retrieval Lambda Role:
###############################################

  FwLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-${AWS::Region}-nfw-lambda-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !GetAtt RetrieveVpcIdLogGroup.Arn
              - Effect: Allow
                Action:
                  - network-firewall:DescribeFirewall
                Resource: "*"

# Retrieve VpceId Lambda Custom Resource:
  RetrieveVpcIdLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
        LogGroupName: !Sub /aws/lambda/${AWS::StackName}-retrieve-vpceid
        RetentionInDays: 1

  RetrieveVpceId:
    Type: AWS::Lambda::Function
    DependsOn: RetrieveVpcIdLogGroup
    Properties:
      FunctionName: !Sub ${AWS::StackName}-retrieve-vpceid
      Handler: "index.handler"
      Role: !GetAtt
        - FwLambdaExecutionRole
        - Arn
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import json
          import logging
          def handler(event, context):
              logger = logging.getLogger()
              logger.setLevel(logging.INFO)
              responseData = {}
              responseStatus = cfnresponse.FAILED
              logger.info('Received event: {}'.format(json.dumps(event)))
              if event["RequestType"] == "Delete":
                  responseStatus = cfnresponse.SUCCESS
                  cfnresponse.send(event, context, responseStatus, responseData)
              if event["RequestType"] == "Create":
                  try:
                      Az1 = event["ResourceProperties"]["Az1"]
                      Az2 = event["ResourceProperties"]["Az2"]
                      FwArn = event["ResourceProperties"]["FwArn"]
                  except Exception as e:
                      logger.info('AZ retrieval failure: {}'.format(e))
                  try:
                      nfw = boto3.client('network-firewall')
                  except Exception as e:
                      logger.info('boto3.client failure: {}'.format(e))
                  try:
                      NfwResponse=nfw.describe_firewall(FirewallArn=FwArn)
                      VpceId1 = NfwResponse['FirewallStatus']['SyncStates'][Az1]['Attachment']['EndpointId']
                      VpceId2 = NfwResponse['FirewallStatus']['SyncStates'][Az2]['Attachment']['EndpointId']
                  except Exception as e:
                      logger.info('ec2.describe_firewall failure: {}'.format(e))
                  responseData['FwVpceId1'] = VpceId1
                  responseData['FwVpceId2'] = VpceId2
                  responseStatus = cfnresponse.SUCCESS
                  cfnresponse.send(event, context, responseStatus, responseData)
      Runtime: python3.12
      Timeout: 30
############################
# FWINVpceIds.FwVpceId1 , FWINVpceIds.FwVpceId2
############################

  VPC02FWVpceIds:
    Type: Custom::DescribeVpcEndpoints
    Properties:
      ServiceToken: !GetAtt RetrieveVpceId.Arn
      Az1: !Ref AvailabilityZoneA
      Az2: !Ref AvailabilityZoneB
      FwArn: !Ref VPC02FW

###############
# VPC Outputs #
###############
Outputs:
  VPC:
    Description: VPC
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}"

  PrivateSubnetABlock:
    Description: PrivateSubnetA
    Value: !Ref PrivateSubnetA
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet-A"

  PrivateSubnetBBlock:
    Description: PrivateSubnetB
    Value: !Ref PrivateSubnetB
    Export:
      Name: !Sub "${AWS::StackName}-Private-Subnet-B"

  FWSubnetABlock:
    Description: FWSubnetA
    Value: !Ref FWSubnetA
    Export:
      Name: !Sub "${AWS::StackName}-FWSubnet-A"

  FWSubnetBBlock:
    Description: FWSubnetB
    Value: !Ref FWSubnetB
    Export:
      Name: !Sub "${AWS::StackName}-FWSubnet-B"

  TGWSubnetABlock:
    Description: TGWSubnetA
    Value: !Ref TGWSubnetA
    Export:
      Name: !Sub "${AWS::StackName}-TGW-Subnet-A"

  TGWSubnetBBlock:
    Description: TGWSubnetB
    Value: !Ref TGWSubnetB
    Export:
      Name: !Sub "${AWS::StackName}-TGW-Subnet-B"

  PrivateAInstanace1ID:
    Description: "Private A Instance 1 ID"
    Value: !Ref PrivateAInstanace1
    Export:
      Name: !Sub "${AWS::StackName}-PrivateAInstanace1ID"

  PrivateAInstanace2ID:
    Description: "Private A Instance 1 ID"
    Value: !Ref PrivateAInstanace2
    Export:
      Name: !Sub "${AWS::StackName}-PrivateAInstanace2ID"

  PrivateBInstanace1ID:
    Description: "Private B Instance 1 ID"
    Value: !Ref PrivateBInstanace1
    Export:
      Name: !Sub "${AWS::StackName}-PrivateBInstanace1ID"

  PrivateBInstanace2ID:
    Description: "Private B Instance 2 ID"
    Value: !Ref PrivateBInstanace2
    Export:
      Name: !Sub "${AWS::StackName}-PrivateBInstanace2ID"

  PrivateSubnetARouteTable:
    Description: PrivateSubnetARouteTableID
    Value: !Ref PrivateSubnetARouteTable
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnetARouteTableID"

  PrivateSubnetBRouteTable:
    Description: PrivateSubnetBRouteTableID
    Value: !Ref PrivateSubnetBRouteTable
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnetBRouteTableID"

  FWSubnetARouteTable:
    Description: FWSubnetARouteTableID
    Value: !Ref FWSubnetARouteTable
    Export:
      Name: !Sub "${AWS::StackName}-FWSubnetARouteTableID"

  FWSubnetBRouteTable:
    Description: FWSubnetBRouteTableID
    Value: !Ref FWSubnetBRouteTable
    Export:
      Name: !Sub "${AWS::StackName}-FWSubnetBRouteTableID"

  TGWSubnetARouteTable:
    Description: TGWSubnetARouteTableID
    Value: !Ref TGWSubnetARouteTable
    Export:
      Name: !Sub "${AWS::StackName}-TGWSubnetARouteTableID"

  TGWSubnetBRouteTable:
    Description: TGWSubnetBRouteTableID
    Value: !Ref TGWSubnetBRouteTable
    Export:
      Name: !Sub "${AWS::StackName}-TGWSubnetBRouteTableID"

  PrivateAInstanace1:
    Description: PrivateAInstanace1 Private IP
    Value: !GetAtt PrivateAInstanace1.PrivateIp
    Export:
      Name: !Sub "${AWS::StackName}-PrivateAInstanace1"

  PrivateAInstanace2:
    Description: PrivateAInstanace2 Private IP
    Value: !GetAtt PrivateAInstanace2.PrivateIp
    Export:
      Name: !Sub "${AWS::StackName}-PrivateAInstanace2"

  PrivateBInstanace1:
    Description: PrivateBInstanace1 Private IP
    Value: !GetAtt PrivateBInstanace1.PrivateIp
    Export:
      Name: !Sub "${AWS::StackName}-PrivateBInstanace1"

  PrivateBInstanace2:
    Description: PrivateBInstanace2 Private IP
    Value: !GetAtt PrivateBInstanace2.PrivateIp
    Export:
      Name: !Sub "${AWS::StackName}-PrivateBInstanace2"
